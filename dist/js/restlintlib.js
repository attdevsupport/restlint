"use strict";var pData={general:{},parameters:[],paths:[],statuses:[],errors:[]},errors={general:[],verbs:[],parameters:[],paths:[],statuses:[],exceptions:[]},allowedHttpMethods=["POST","PUT","GET","DELETE"],allowedHostsExt=["lgw.att.com","api.att.com"],jsdata="",naming="lowerCamel",isExternal=!0,statuscodes={get:{success:"200|204|206",mandatory:["400","401","403","404","405","406","410","429","431","500","503"],optional:["408","414","416","426","451","501","502","504"]},post:{success:"200|201|202|204",mandatory:["400","401","403","404","405","406","410","411","413","415","429","431","500","503"],optional:["408","409","412","417","426","428","451","501","502","504"]},put:{success:"200|201|202|204",mandatory:["400","401","403","404","405","406","409","410","411","413","415","429","431","500","503"],optional:["408","412","417","426","428","451","501","502","504"]},delete:{success:"200|202|204",mandatory:["400","401","403","404","405","406","409","410","415","429","431","500","503"],optional:["408","412","414","417","426","451","501","502","504"]}},errordetails={STATUSCODES_GET_MAN:{short:"Missing mandatory HTTP status codes: $1",long:"The HTTP method GET should have the following status codes possible, and should be accounted for in the design of the API: "}},getProps=function(o,n){var h=[];return Object.keys(n).forEach(function(e,r){var a="object",t=[];if(o&&t.push(o),t.push(e),n[e].type&&(a=n[e].type),n[e].hasOwnProperty("items"))if(n[e].items.hasOwnProperty("$ref")){var s=n[e].items.$ref;getProps(t.join("."),jsdata.schemas[s].properties).forEach(function(e,r){t.push(e),h.push(e)})}else n[e].items.hasOwnProperty("type")&&h.push(t.join(".")+","+n[e].items.type);else if(n[e].hasOwnProperty("$ref")){s=n[e].$ref;getProps(t.join("."),jsdata.schemas[s].properties).forEach(function(e,r){t.push(e),h.push(e)})}else n[e].hasOwnProperty("type")?h.push(t.join(".")+","+n[e].type):h.push(t.join(".")+","+a)}),h},getCsvFileType=function(e){var r=2+(e.lastIndexOf("-")-1>>>0),a=1+(e.lastIndexOf(".")-1>>>0);return e.slice(r,a)},createErrorObj=function(e,r,a){var t={};return t.name=e,t.msg=a,t.level=r,t},createStatusObj=function(e,r,a){var t={};return t.path=e,t.method=r,t.statuses=a,t},checkBasePath=function(){var e=[],r="";e.push(pData.general.basePath),checkPathStructure("basePath",e),(pData.general.basePath.match(/^(\/.*){1,3}\/v[0-9]/)||[]).length||(r=(pData.general.basePath.match(/v[0-9]/g)||[]).length?"basePath should be of the form {/routing}*{/APIName}/{version}{/resourcePath}, where routing can contain 0-2 path segments.":"basePath should have version string (v[0-9], e.g. v1)",errors.paths.push(createErrorObj(pData.general.basePath,"error",r))),(pData.general.basePath.match(/(\/)?flow\//)||[]).length&&(r="basePath should have 'flow' as a path segment <em>only</em> if the API is Flow based and is being exposed through BlackFlag",errors.paths.push(createErrorObj(pData.general.basePath,"warning",r))),"2.0"===pData.general.version&&(r="Consider upgrading to the newer <a href='https://www.openapis.org/' target='_blank'>OpenAPI</a> spec. The Swagger spec will be outdated, and has less features. You can convert your Swagger spec into OpenAPI online (e.g. <a href='https://github.com/mermade/swagger2openapi' target='_blank'>swagger2openapi</a>).",errors.general.push(createErrorObj("Version = "+pData.general.version,"info",r)))},checkResources=function(e){e.forEach(function(e,r){var a=e.replace(/^[/]+|[/]$/,"").split("/"),t=a[a.length-1],s=a[a.length-2],o="";t.match(/^{.*}$/)&&"s"!=s[s.length-1]&&(o="collections ("+s+") must be plural",errors.paths.push(createErrorObj(e,"error",o))),t.match(/create|make|delete|update|get|del|remove/i)&&(o="resource must be a noun",errors.paths.push(createErrorObj(e,"error",o))),"lowerCamel"===naming?/^[A-Z_-]+|[_-]+/.test(t)&&(o="resource must be lowerCamel case",errors.paths.push(createErrorObj(e,"error",o))):"UpperCamel"===naming?t.match(/^[a-z_-]+|[_-]+/)&&(o="resource must be UpperCamel case",errors.paths.push(createErrorObj(e,"error",o))):"snake"===naming&&0==t.match(/[_]/)&&(o="resource must be in snake_case",errors.paths.push(createErrorObj(e,"warning",o)))})},checkPathStructure=function(s,e){e.forEach(function(e,r){var a="",t=e.replace(/\/|{|}/g,"");e.match(/\/\//)&&(a=s+" can not have double forward slash",errors.paths.push(createErrorObj(e,"error",a))),t!=encodeURIComponent(t)&&(a=s+" can not have reserved characters",errors.paths.push(createErrorObj(e,"error",a))),(e.match(/\//g)||[]).length||(a=s+" should have at least one forward slash",errors.paths.push(createErrorObj(e,"warning",a))),"/"!=e[0]&&(a=s+" should have leading forward slash",errors.paths.push(createErrorObj(e,"error",a))),"/"===e[e.length-1]&&(a=s+" should not have forward slash at end of path",errors.paths.push(createErrorObj(e,"warning",a)))})},checkStatusCodes=function(c){c.forEach(function(e,a){var r="",t="",s={},o=c[a].method.toLowerCase();"post"===o&&c[a].statuses.indexOf("201")<0&&(r="POST for <u>creating</u> resources should return HTTP status code of 201",r+=" (only show: "+c[a].statuses.join(",")+")",t=c[a].method.toUpperCase()+" "+c[a].path,s=createErrorObj(t,"warning",r),errors.statuses.push(s));var n=[];void 0!==statuscodes[o]&&statuscodes[o].mandatory.forEach(function(e,r){c[a].statuses.indexOf(e)&&n.push(e)}),0<n.length&&(r="missing mandatory HTTP status codes: "+n.join(", "),t=c[a].method.toUpperCase()+" "+c[a].path,s=createErrorObj(t,"error",r),errors.statuses.push(s));var h=[];void 0!==statuscodes[o]&&statuscodes[o].optional.forEach(function(e,r){c[a].statuses.indexOf(e)&&h.push(e)}),0<h.length&&(r="missing optional HTTP status codes (verify if codes are needed): "+h.join(", "),t=c[a].method.toUpperCase()+" "+c[a].path,s=createErrorObj(t,"warning",r),errors.statuses.push(s))})},checkMethods=function(e){e.forEach(function(e,r){var a="",t={},s=e.method.toUpperCase();allowedHttpMethods.indexOf(s)<0&&(a="The only HTTP methods allowed are: "+allowedHttpMethods.join(","),t=createErrorObj(s,"error",a),errors.verbs.push(t))})},checkGeneral=function(){var e="",r={};(1!=pData.general.schemes.length||pData.general.schemes.indexOf("https")<0)&&(e="schemes must have <em>https</em> and only <em>https</em>",r=createErrorObj(pData.general.schemes.join(","),"error",e),errors.general.push(r)),isExternal&&allowedHostsExt.indexOf(pData.general.host)<0&&(e="host names for externally exposed APIs must be either <em>lgw.att.com</em> or <em>api.att.com</em>",r=createErrorObj(pData.general.host,"error",e),errors.general.push(r))},getErrors=function(e){return errors[e]},getData=function(e){return pData[e]},clearData=function(){Object.keys(pData).forEach(function(e,r){Array.isArray(pData[e])?pData[e].length=0:pData[e]={}}),Object.keys(errors).forEach(function(e,r){errors[e].length=0}),jsdata=""},loadCsv=function(e,r){var a=r.split("\n"),t=a[0].split(",");a.splice(1).forEach(function(e){e.split(",").forEach(function(e,r){console.log(t[r]+" = "+e)})})},loadJson=function(e){var s=JSON.parse(e);pData.general.basePath=s.basePath,pData.general.host=s.host,pData.general.schemes=s.schemes,s.swagger?pData.general.version=s.swagger:pData.general.version=s.openapi,Object.keys(s.paths).forEach(function(t,e){pData.paths[e]=t,Object.keys(s.paths[t]).forEach(function(e,r){var a=[];Object.keys(s.paths[t][e].responses).forEach(function(e,r){a.push(e)}),pData.statuses.push(createStatusObj(t,e,a))}),getProps("",pData.paths[e]).forEach(function(e,r){})})};